package com.stego.yangxiao.cameraapp;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.*;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.*;

public class MainActivity extends AppCompatActivity implements CapturePicListener, ActivityCompat
		.OnRequestPermissionsResultCallback {

	private static final String TAG = "StegoCam";
	private Button btn_takePic;

	private CapturePicService picServ;

	private static final int REQUEST_CAMERA_PERMISSION = 200;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		checkPermission();

		File filel = new File(
				Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
						File.separator
						+ "StegoCam" + File.separator);
		if (!filel.exists()) {
			cToast("Mkdir");
			filel.mkdir();
		}

		//getting instance of the Service from CapturePic
		picServ = CapturePic.getInstance(this);

		btn_takePic = (Button) findViewById(R.id.btn_takepicture);
		btn_takePic.setOnClickListener(v -> {
			//100, 200, 1000
			//0.1, 0.02, 0.005 - 100000000, 20000000, 5000000ns 1/200

			picServ.startCapturing(this);
		});
	}


	/**
	 * We've finished taking pictures from all phone's cameras
	 */
	@Override
	public void onDoneCapturingAllPhotos(TreeMap<String, byte[]> picturesTaken) {
		if (picturesTaken != null && !picturesTaken.isEmpty()) {
			cToast("Done capturing all photos!");
			return;
		}
	}

	/**
	 * Displaying the pictures taken.
	 */
	@Override
	public void onCaptureDone(String pictureUrl, byte[] pictureData) {
		if (pictureData != null && pictureUrl != null) {
			runOnUiThread(() -> {
				final Bitmap bitmap = BitmapFactory.decodeByteArray(pictureData, 0, pictureData.length);
				final int nh = (int) (bitmap.getHeight() * (512.0 / bitmap.getWidth()));
				final Bitmap scaled = Bitmap.createScaledBitmap(bitmap, 512, nh, true);

			});
			cToast("Picture saved to " + pictureUrl);
		}
	}


	/**
	 * A dialog fragment for displaying non-recoverable errors; this {@ling Activity} will be
	 * finished once the dialog has been acknowledged by the user.
	 */
	public static class ErrorDialog extends DialogFragment {

		private String mErrorMessage;

		public ErrorDialog() {
			mErrorMessage = "Unknown error occurred!";
		}

		// Build a dialog with a custom message (Fragments require default constructor).
		public static ErrorDialog buildErrorDialog(String errorMessage) {
			ErrorDialog dialog = new ErrorDialog();
			dialog.mErrorMessage = errorMessage;
			return dialog;
		}

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			final Activity activity = getActivity();
			return new AlertDialog.Builder(activity)
					.setMessage(mErrorMessage)
					.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialogInterface, int i) {
							activity.finish();
						}
					})
					.create();
		}
	}


	/**
	 * Helper method that create Toast
	 */
	private void cToast(final String text) {
		Toast.makeText(getApplicationContext(), text, Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
	                                       @NonNull int[] grantResults) {
		if (requestCode == REQUEST_CAMERA_PERMISSION) {
			if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
				// close the app
				cToast("Sorry!!!, you can't use this app without granting permission");
				finish();
			}
		}
	}

	/**
	 * Checking permissions
	 */
	private void checkPermission() {
		final String[] requiredPermissions = {
				Manifest.permission.WRITE_EXTERNAL_STORAGE,
				Manifest.permission.CAMERA,
		};
		final List<String> neededPermissions = new ArrayList<>();
		for (final String permission : requiredPermissions) {
			if (ContextCompat.checkSelfPermission(getApplicationContext(),
					permission) != PackageManager.PERMISSION_GRANTED) {
				neededPermissions.add(permission);
			}
		}
		if (!neededPermissions.isEmpty()) {
			requestPermissions(neededPermissions.toArray(new String[]{}), REQUEST_CAMERA_PERMISSION);
		}
	}


}
