package com.stego.yangxiao.stegcam;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.pm.PackageManager;
import android.graphics.ImageFormat;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.*;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.*;

public class MainActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback {
	
	private static final String TAG = "StegoCam";
	private Button btn_takePic;
	private TextureView textureView;
	
	private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
	
	static {
		ORIENTATIONS.append(Surface.ROTATION_0, 90);
		ORIENTATIONS.append(Surface.ROTATION_90, 0);
		ORIENTATIONS.append(Surface.ROTATION_180, 270);
		ORIENTATIONS.append(Surface.ROTATION_270, 180);
	}
	
	private String mCameraId;
	protected CameraDevice cameraDevice;
	private CameraCharacteristics mCharacteristics;
	
	protected CameraCaptureSession cameraCaptureSessions;
	protected CaptureRequest.Builder previewRequestBuilder;
	private CaptureResult mCaptureResult;
	
	private Size imageDimension;
	private File file;
	
	private boolean mFlashSupported;
	private Handler mBackgroundHandler;
	private HandlerThread mBackgroundThread;
	
	private ImageReader imageReader_JPEG;
	private ImageReader imageReader_RAW;
	
	private static final int MAX_PREVIEW_WIDTH = 1920;
	private static final int MAX_PREVIEW_HEIGHT = 1080;
	private static final int REQUEST_CAMERA_PERMISSION = 200;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		checkPermission();
		File filel = new File(
				Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
						File.separator
						+ "StegoCam" + File.separator);
		if (!filel.exists()) {
			cToast("Mkdir");
			filel.mkdir();
		}
		
		
		textureView = (TextureView) findViewById(R.id.texture);
		assert textureView != null;
		textureView.setSurfaceTextureListener(textureListener);
		
		btn_takePic = (Button) findViewById(R.id.btn_takepicture);
		assert btn_takePic != null;
		btn_takePic.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(final View v) {
				//100, 200, 1000
				//0.1, 0.02, 0.005 - 100000000, 20000000, 5000000ns 1/200
				cToast("Taking 10 pictures");
				
				long time1 = System.nanoTime();
				
				final long changeTime = 1000L;
				v.postDelayed(new Runnable() {
					@Override
					public void run() {
						takePicture(100, 5000000L);
					}
				}, changeTime);
			}
		});
	}
	
	private final Object mCameraStateLock = new Object();
	
	/**
	 * Sets up state related to camera that is needed before opening a {@link CameraDevice}.
	 */
	private boolean setUpCameraOutputs() {
		CameraManager manager = (CameraManager) MainActivity.this.getSystemService(Context.CAMERA_SERVICE);
		if (manager == null) {
			ErrorDialog.buildErrorDialog("This device doesn't support Camera2 API.").
					show(getFragmentManager(), "dialog");
			return false;
		}
		try {
			// Find a CameraDevice that supports RAW captures, and configure state.
			for (String cameraId : manager.getCameraIdList()) {
				CameraCharacteristics characteristics
						= manager.getCameraCharacteristics(cameraId);
				
				// We only use a camera that supports RAW in this sample.
				if (!contains(characteristics.get(
						CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES),
						CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_RAW)) {
					continue;
				}
				
				StreamConfigurationMap map = characteristics.get(
						CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
				
				// For still image captures, we use the largest available size.
				Size largestJpeg = Collections.max(
						Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),
						new CompareSizesByArea());
				
				Size largestRaw = Collections.max(
						Arrays.asList(map.getOutputSizes(ImageFormat.RAW_SENSOR)),
						new CompareSizesByArea());
				Log.d("RAW", largestRaw.toString());
				
				synchronized (mCameraStateLock) {
					// Set up ImageReaders for JPEG and RAW outputs.  Place these in a reference
					// counted wrapper to ensure they are only closed when all background tasks
					// using them are finished.
					imageReader_JPEG = ImageReader.newInstance(largestJpeg.getWidth(),
							largestJpeg.getHeight(), ImageFormat.JPEG, /*maxImages*/1);
					
					imageReader_RAW = ImageReader.newInstance(largestRaw.getWidth(),
							largestRaw.getHeight(), ImageFormat.RAW_SENSOR, /*maxImages*/1);
					
					imageReader_JPEG.setOnImageAvailableListener(jpeg_ReaderListener, mBackgroundHandler);
					imageReader_RAW.setOnImageAvailableListener(raw_ReaderListener, mBackgroundHandler);
					
					mCharacteristics = characteristics;
					mCameraId = cameraId;
				}
				return true;
			}
		}
		catch (CameraAccessException e) {
			e.printStackTrace();
		}
		
		// If we found no suitable cameras for capturing RAW, warn the user.
		ErrorDialog.buildErrorDialog("This device doesn't support capturing RAW photos").
				show(getFragmentManager(), "dialog");
		return false;
	}
	
	ImageReader.OnImageAvailableListener raw_ReaderListener = new ImageReader.OnImageAvailableListener() {
		@Override
		public void onImageAvailable(ImageReader reader) {
			file = new File(
					Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
							File.separator
							+ "StegoCam" + File.separator + "RAW_" + generateTimestamp() + ".dng");
			
			Log.d(TAG, "Raw Image available");
			if (mCharacteristics == null || mCaptureResult == null) {
				//				Log.e(TAG, "NULLL!!!");
				if (mCharacteristics == null) {
					Log.e(TAG, "NULLL!!!");
				} else if (mCaptureResult == null) {
					Log.e(TAG, "mCaptureResult!!!");
				}
			} else {
				
				DngCreator dngCreator = new DngCreator(mCharacteristics, mCaptureResult);
				FileOutputStream output = null;
				
				Image image = null;
				
				try {
					image = reader.acquireNextImage();
					output = new FileOutputStream(file);
					dngCreator.writeImage(output, image);
					Log.d(TAG, "DimD" + image.getWidth() + " * " + image.getHeight());
					Image.Plane pl[] = image.getPlanes();
				}
				catch (IOException e) {
					e.printStackTrace();
				}
				finally {
					image.close();
					try {
						output.close();
					}
					catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
	};
	
	ImageReader.OnImageAvailableListener jpeg_ReaderListener = new ImageReader.OnImageAvailableListener() {
		@Override
		public void onImageAvailable(ImageReader reader) {
			file = new File(
					Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
							File.separator
							+ "StegoCam" + File.separator + "JPEG_" + generateTimestamp() + ".jpg");
			
			Log.d(TAG, "Image available");
			Image image = null;
			try {
				image = reader.acquireNextImage();
				ByteBuffer buffer = image.getPlanes()[0].getBuffer();
				byte[] bytes = new byte[buffer.capacity()];
				buffer.get(bytes);
				save(bytes);
			}
			catch (IOException e) {
				e.printStackTrace();
			}
			finally {
				if (image != null) {
					image.close();
				}
			}
		}
		
		private void save(byte[] bytes) throws IOException {
			OutputStream output = null;
			try {
				output = new FileOutputStream(file);
				output.write(bytes);
				cToast("Saved");
				Log.d(TAG, "Saved: " + file.getAbsolutePath());
				
			}
			finally {
				if (null != output) {
					output.close();
				}
			}
		}
	};
	
	protected void takePicture(int isoValue, long exp) {
		if (null == cameraDevice) {
			Log.e(TAG, "cameraDevice is null");
			return;
		} else {
			Log.d(TAG, "Camera device is on!\n" + "ID: " + cameraDevice.getId() + "\nToString: " +
					cameraDevice.toString());
		}
		
		CameraManager manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
		
		try {
			CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraDevice.getId());
			
			final CaptureRequest.Builder captureBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
			captureBuilder.addTarget(imageReader_JPEG.getSurface());
			captureBuilder.addTarget(imageReader_RAW.getSurface());
			captureBuilder.set(CaptureRequest.CONTROL_AE_MODE, CameraMetadata.CONTROL_AE_MODE_OFF);
			//100, 200, 1000
			captureBuilder.set(CaptureRequest.SENSOR_SENSITIVITY, isoValue);
			//0.1, 0.02, 0.005 - 100000000, 20000000, 5000000ns
			captureBuilder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, exp);
			
			// Orientation
			int rotation = getWindowManager().getDefaultDisplay().getRotation();
			captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, ORIENTATIONS.get(rotation));
						
			CaptureRequest request = captureBuilder.build();
			cameraCaptureSessions.capture(request, captureListener, mBackgroundHandler);
			
		}
		catch (CameraAccessException e) {
			e.printStackTrace();
		}
	}
	
	final CameraCaptureSession.CaptureCallback captureListener = new CameraCaptureSession.CaptureCallback() {
		@Override
		public void onCaptureCompleted(CameraCaptureSession session, CaptureRequest request,
		                               TotalCaptureResult result) {
			super.onCaptureCompleted(session, request, result);
			Log.d(TAG, "onCaptureCompleted");
			//cToast("Saved:" + file.getAbsolutePath());
			mCaptureResult = result;
			createCameraPreview();
		}
	};
	
	TextureView.SurfaceTextureListener textureListener = new TextureView.SurfaceTextureListener() {
		@Override
		public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
			//open your camera here
			openCamera();
		}
		
		@Override
		public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
			// Transform you image captured size according to the surface width and height
		}
		
		@Override
		public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
			return false;
		}
		
		@Override
		public void onSurfaceTextureUpdated(SurfaceTexture surface) {
		}
	};
	
	private void openCamera() {
		if (!setUpCameraOutputs()) {
			return;
		}
		
		CameraManager cm = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
		
		try {
			mCameraId = cm.getCameraIdList()[0];
			CameraCharacteristics cc = cm.getCameraCharacteristics(mCameraId);
			StreamConfigurationMap streamConfigs = cc.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
			imageDimension = streamConfigs.getOutputSizes(SurfaceTexture.class)[0];
			
			// Add permission for camera and let user grant the permission
			if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA) !=
					PackageManager.PERMISSION_GRANTED &&
					ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) !=
							PackageManager.PERMISSION_GRANTED) {
				ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.CAMERA, Manifest.permission
						.WRITE_EXTERNAL_STORAGE}, REQUEST_CAMERA_PERMISSION);
				return;
			}
			
			cm.openCamera(mCameraId, stateCallback, null);
		}
		catch (CameraAccessException e) {
			e.printStackTrace();
		}
	}
	
	protected void createCameraPreview() {
		try {
			SurfaceTexture texture = textureView.getSurfaceTexture();
			texture.setDefaultBufferSize(1920, 1080);
			Log.d("CamPreview", "Size: " + imageDimension.getWidth() + " * " + imageDimension.getHeight());
			Surface surface = new Surface(texture);
			
			previewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
			previewRequestBuilder.addTarget(surface);
			
			// Create a CameraCaptureSession for camera preview.
			cameraDevice.createCaptureSession(Arrays.asList(surface, imageReader_JPEG.getSurface(), imageReader_RAW.getSurface
					()), new
					CameraCaptureSession
							.StateCallback() {
						@Override
						public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
							synchronized (mCameraStateLock) {
								//The camera is already closed
								if (null == cameraDevice) {
									return;
								}
								try {
									previewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
									
									// Finally, we start displaying the camera preview.
									cameraCaptureSession.setRepeatingRequest(
											previewRequestBuilder.build(),
											null, mBackgroundHandler);
								}
								catch (CameraAccessException | IllegalStateException e) {
									e.printStackTrace();
									return;
								}
								
								// When the session is ready, we start displaying the preview.
								cameraCaptureSessions = cameraCaptureSession;
							}
						}
						
						@Override
						public void onConfigureFailed(
								@NonNull CameraCaptureSession cameraCaptureSession) {
							cToast("Configuration Failed");
						}
					}, null);
			
		}
		catch (CameraAccessException e) {
			e.printStackTrace();
		}
	}
	
	
	private final CameraDevice.StateCallback stateCallback = new CameraDevice.StateCallback() {
		@Override
		public void onOpened(CameraDevice camera) {
			//This is called when the camera is open
			Log.d(TAG, "Opening Camera");
			synchronized (mCameraStateLock) {
				cameraDevice = camera;
				createCameraPreview();
			}
		}
		
		@Override
		public void onDisconnected(CameraDevice camera) {
			cameraDevice.close();
		}
		
		@Override
		public void onError(CameraDevice camera, int error) {
			cameraDevice.close();
			cameraDevice = null;
		}
	};
	
	final CameraCaptureSession.CaptureCallback captureCallbackListener = new CameraCaptureSession.CaptureCallback() {
		@Override
		public void onCaptureCompleted(CameraCaptureSession session, CaptureRequest request,
		                               TotalCaptureResult result) {
			super.onCaptureCompleted(session, request, result);
			cToast("Saved:" + file);
			createCameraPreview();
		}
	};
	
	protected void startBackgroundThread() {
		mBackgroundThread = new HandlerThread("Camera Background");
		mBackgroundThread.start();
		mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
	}
	
	protected void stopBackgroundThread() {
		mBackgroundThread.quitSafely();
		try {
			mBackgroundThread.join();
			mBackgroundThread = null;
			mBackgroundHandler = null;
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	
	private void closeCamera() {
		if (null != cameraDevice) {
			cameraDevice.close();
			cameraDevice = null;
		}
		if (null != imageReader_RAW) {
			imageReader_RAW.close();
			imageReader_RAW = null;
		}
		if (null != imageReader_JPEG) {
			imageReader_JPEG.close();
			imageReader_JPEG = null;
		}
		
		Log.w(TAG, "Cam is closed");
	}
	
	
	@Override
	protected void onResume() {
		super.onResume();
		Log.i(TAG, "onResume");
		startBackgroundThread();
		if (textureView.isAvailable()) {
			openCamera();
		} else {
			textureView.setSurfaceTextureListener(textureListener);
		}
	}
	
	@Override
	protected void onPause() {
		Log.i(TAG, "onPause");
		closeCamera();
		stopBackgroundThread();
		super.onPause();
	}
	
	
	/**
	 * A dialog fragment for displaying non-recoverable errors; this {@ling Activity} will be
	 * finished once the dialog has been acknowledged by the user.
	 */
	public static class ErrorDialog extends DialogFragment {
		
		private String mErrorMessage;
		
		public ErrorDialog() {
			mErrorMessage = "Unknown error occurred!";
		}
		
		// Build a dialog with a custom message (Fragments require default constructor).
		public static ErrorDialog buildErrorDialog(String errorMessage) {
			ErrorDialog dialog = new ErrorDialog();
			dialog.mErrorMessage = errorMessage;
			return dialog;
		}
		
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			final Activity activity = getActivity();
			return new AlertDialog.Builder(activity)
					.setMessage(mErrorMessage)
					.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialogInterface, int i) {
							activity.finish();
						}
					})
					.create();
		}
	}
	
	
	/**
	 * Return true if the given array contains the given integer.
	 *
	 * @param modes array to check.
	 * @param mode  integer to get for.
	 * @return true if the array contains the given integer, otherwise false.
	 */
	private static boolean contains(int[] modes, int mode) {
		if (modes == null) {
			return false;
		}
		for (int i : modes) {
			if (i == mode) {
				return true;
			}
		}
		return false;
	}
	
	
	/**
	 * Comparator based on area of the given {@link Size} objects.
	 */
	static class CompareSizesByArea implements Comparator<Size> {
		
		@Override
		public int compare(Size lhs, Size rhs) {
			// We cast here to ensure the multiplications won't overflow
			return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
					(long) rhs.getWidth() * rhs.getHeight());
		}
	}
	
	/**
	 * Generate a string containing a formatted timestamp with the current date and time.
	 *
	 * @return a {@link String} representing a time.
	 */
	private static String generateTimestamp() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss_SSS", Locale.US);
		return sdf.format(new Date());
	}
	
	
	/**
	 * Helper method that create Toast
	 */
	private void cToast(final String text) {
		Toast.makeText(getApplicationContext(), text, Toast.LENGTH_SHORT).show();
	}
	
	@Override
	public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
	                                       @NonNull int[] grantResults) {
		if (requestCode == REQUEST_CAMERA_PERMISSION) {
			if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
				// close the app
				cToast("Sorry!!!, you can't use this app without granting permission");
				finish();
			}
		}
	}
	
	/**
	 * Checking permissions
	 */
	private void checkPermission() {
		final String[] requiredPermissions = {
				Manifest.permission.WRITE_EXTERNAL_STORAGE,
				Manifest.permission.CAMERA,
		};
		final List<String> neededPermissions = new ArrayList<>();
		for (final String permission : requiredPermissions) {
			if (ContextCompat.checkSelfPermission(getApplicationContext(),
					permission) != PackageManager.PERMISSION_GRANTED) {
				neededPermissions.add(permission);
			}
		}
		
		if (!neededPermissions.isEmpty()) {
			requestPermissions(neededPermissions.toArray(new String[]{}), REQUEST_CAMERA_PERMISSION);
		}
	}
	
	
}
